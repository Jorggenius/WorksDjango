-- MySQL Script generated by MySQL Workbench
-- Sat May  3 05:44:18 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

-- -----------------------------------------------------
-- Schema projectFinal
-- -----------------------------------------------------
-- Aloja los datos del sistema de información académico de la institución. Es la base de datos transaccional que atiende los procesos rutinarios como gestión de estudiantes, docentes, grupos y calificaciones.
DROP SCHEMA IF EXISTS `projectFinal` ;

-- -----------------------------------------------------
-- Schema projectFinal
--
-- Aloja los datos del sistema de información académico de la institución. Es la base de datos transaccional que atiende los procesos rutinarios como gestión de estudiantes, docentes, grupos y calificaciones.
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `projectFinal` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_spanish_ci ;
USE `projectFinal` ;

-- -----------------------------------------------------
-- Table `projectFinal`.`tipo_documento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`tipo_documento` (
  `tido_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  `estado` CHAR(1) NOT NULL,
  PRIMARY KEY (`tido_id`))
ENGINE = InnoDB
COMMENT = 'Aloja los tipos de documentos de identificación nacional que pueden tener las personas al rededor del mundo.';

CREATE UNIQUE INDEX `nombre_UNIQUE` ON `projectFinal`.`tipo_documento` (`nombre` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`pais`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`pais` (
  `pais_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(100) NOT NULL,
  `estado` CHAR(1) NOT NULL,
  PRIMARY KEY (`pais_id`))
ENGINE = InnoDB
COMMENT = '		';


-- -----------------------------------------------------
-- Table `projectFinal`.`departamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`departamento` (
  `depa_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `pais_id` INT UNSIGNED NOT NULL,
  `nombre` VARCHAR(100) NOT NULL,
  `estado` CHAR(1) NOT NULL,
  PRIMARY KEY (`depa_id`),
  CONSTRAINT `fk_departamento_pais1`
    FOREIGN KEY (`pais_id`)
    REFERENCES `projectFinal`.`pais` (`pais_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_departamento_pais1_idx` ON `projectFinal`.`departamento` (`pais_id` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`ciudad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`ciudad` (
  `ciud_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `depa_id` INT UNSIGNED NOT NULL,
  `nombre` VARCHAR(100) NOT NULL,
  `estado` CHAR(1) NOT NULL,
  PRIMARY KEY (`ciud_id`),
  CONSTRAINT `fk_ciudad_departamento1`
    FOREIGN KEY (`depa_id`)
    REFERENCES `projectFinal`.`departamento` (`depa_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_ciudad_departamento1_idx` ON `projectFinal`.`ciudad` (`depa_id` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`persona`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`persona` (
  `pers_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `tido_id` INT UNSIGNED NOT NULL,
  `ciud_id_nacimiento` INT UNSIGNED NOT NULL,
  `ciud_id_residencia` INT UNSIGNED NOT NULL,
  `nombre` VARCHAR(45) NOT NULL,
  `apellido` VARCHAR(45) NOT NULL,
  `documento` VARCHAR(45) NOT NULL,
  `fecha_nacimiento` VARCHAR(45) NOT NULL,
  `estado` CHAR(1) NOT NULL COMMENT 'Indica si el registro se encuentra activo o no. Activo = 1, Inactivo = 0',
  PRIMARY KEY (`pers_id`),
  CONSTRAINT `foke_pers_tido`
    FOREIGN KEY (`tido_id`)
    REFERENCES `projectFinal`.`tipo_documento` (`tido_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_persona_ciudad1`
    FOREIGN KEY (`ciud_id_nacimiento`)
    REFERENCES `projectFinal`.`ciudad` (`ciud_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_persona_ciudad2`
    FOREIGN KEY (`ciud_id_residencia`)
    REFERENCES `projectFinal`.`ciudad` (`ciud_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `inde_foke_pers_tido` ON `projectFinal`.`persona` (`tido_id` ASC) ;

CREATE INDEX `fk_persona_ciudad1_idx` ON `projectFinal`.`persona` (`ciud_id_nacimiento` ASC) ;

CREATE INDEX `fk_persona_ciudad2_idx` ON `projectFinal`.`persona` (`ciud_id_residencia` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`eps`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`eps` (
  `eps_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(100) NOT NULL COMMENT 'Nombre con el que se conoce la EPS.',
  `estado` CHAR(1) NOT NULL COMMENT 'Indica si el registro se encuentra activo o no. Activo = 1, Inactivo = 0',
  PRIMARY KEY (`eps_id`))
ENGINE = InnoDB
COMMENT = 'Aloja las EPSs que existen.';

CREATE UNIQUE INDEX `nombre_UNIQUE` ON `projectFinal`.`eps` (`nombre` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`caja_compensacion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`caja_compensacion` (
  `caco_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Aloja las cajas de compensaciones existentes.',
  `nombre` VARCHAR(100) NOT NULL COMMENT 'Nombre de la caja de compensación.',
  `estado` CHAR(1) NOT NULL COMMENT 'Indica si el registro se encuentra activo o no. Activo = 1, Inactivo = 0',
  PRIMARY KEY (`caco_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projectFinal`.`persona_civil`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`persona_civil` (
  `pers_id` INT UNSIGNED NOT NULL COMMENT 'Clave primaria de la tabla persona.',
  `caco_id` INT UNSIGNED NOT NULL COMMENT 'Clave foránea de la caja de compensación familiar.',
  `eps_id` INT UNSIGNED NOT NULL COMMENT 'Clave foránea de la Entidad promotora de salud.',
  `estrato_socioeconomico` VARCHAR(50) NOT NULL,
  `sisben_categoria` VARCHAR(50) NULL DEFAULT 'Desconocido',
  `estado_civil` VARCHAR(50) NULL DEFAULT 'Desconocido',
  `telefono` VARCHAR(50) NULL COMMENT 'Número telefónico principal de la persona.',
  `telefono2` VARCHAR(50) NULL COMMENT 'Número telefónico secundario de la persona.',
  `telefono3` VARCHAR(50) NULL COMMENT 'Número telefónico secundario de la persona.',
  `telefonos` VARCHAR(255) NULL COMMENT 'Todos los números telefónicos conocidos de la persona. Separados por comas.',
  PRIMARY KEY (`pers_id`),
  CONSTRAINT `fk_persona_civil_eps1`
    FOREIGN KEY (`eps_id`)
    REFERENCES `projectFinal`.`eps` (`eps_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_persona_civil_caja_compensacion1`
    FOREIGN KEY (`caco_id`)
    REFERENCES `projectFinal`.`caja_compensacion` (`caco_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_persona_civil_persona1`
    FOREIGN KEY (`pers_id`)
    REFERENCES `projectFinal`.`persona` (`pers_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_persona_civil_eps1_idx` ON `projectFinal`.`persona_civil` (`eps_id` ASC) ;

CREATE INDEX `fk_persona_civil_caja_compensacion1_idx` ON `projectFinal`.`persona_civil` (`caco_id` ASC) ;

CREATE INDEX `fk_persona_civil_persona1_idx` ON `projectFinal`.`persona_civil` (`pers_id` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`tipo_familiar`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`tipo_familiar` (
  `tifa_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador único del registro.',
  `nombre` VARCHAR(50) NOT NULL,
  `estado` CHAR(1) NOT NULL DEFAULT '1' COMMENT 'Indica si el registro se encuentra activo o no. Activo = 1, Inactivo = 0',
  PRIMARY KEY (`tifa_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projectFinal`.`familia`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`familia` (
  `fami_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador unico del registro.',
  `pers_id` INT UNSIGNED NOT NULL COMMENT 'Persona a la cual se le está registrando su familiar.',
  `pers_id_familiar` INT UNSIGNED NOT NULL COMMENT 'Indica cuál es el identificador único del familiar que se está asociando.',
  `tifa_id` INT UNSIGNED NOT NULL COMMENT 'Es el identificador único del tipo de familiar que se está registrando, proviene de la tabla denominada familia.',
  PRIMARY KEY (`fami_id`),
  CONSTRAINT `fk_Familia_tipo_familiar1`
    FOREIGN KEY (`tifa_id`)
    REFERENCES `projectFinal`.`tipo_familiar` (`tifa_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Familia_persona1`
    FOREIGN KEY (`pers_id_familiar`)
    REFERENCES `projectFinal`.`persona` (`pers_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Familia_tipo_familiar1_idx` ON `projectFinal`.`familia` (`tifa_id` ASC) ;

CREATE INDEX `fk_Familia_persona1_idx` ON `projectFinal`.`familia` (`pers_id_familiar` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`numero_telefono`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`numero_telefono` (
  `nute_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador único del registro.',
  `numero` VARCHAR(50) NOT NULL COMMENT 'Número único que representa la dirección telefónica.',
  `estado` CHAR(1) NOT NULL DEFAULT '1' COMMENT 'Indica si el registro se encuentra activo o no. Activo = 1, Inactivo = 0',
  PRIMARY KEY (`nute_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projectFinal`.`linea_telefonica`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`linea_telefonica` (
  `lite_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `pers_id` INT UNSIGNED NOT NULL,
  `nute_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`lite_id`),
  CONSTRAINT `fk_linea_telefonica_numero_telefono1`
    FOREIGN KEY (`nute_id`)
    REFERENCES `projectFinal`.`numero_telefono` (`nute_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_linea_telefonica_persona_civil1`
    FOREIGN KEY (`pers_id`)
    REFERENCES `projectFinal`.`persona_civil` (`pers_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_linea_telefonica_numero_telefono1_idx` ON `projectFinal`.`linea_telefonica` (`nute_id` ASC) ;

CREATE INDEX `fk_linea_telefonica_persona_civil1_idx` ON `projectFinal`.`linea_telefonica` (`pers_id` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`institucion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`institucion` (
  `inst_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `ciud_id` INT UNSIGNED NOT NULL,
  `nombre` VARCHAR(100) NOT NULL,
  `nit` VARCHAR(50) NOT NULL COMMENT 'Número único de identificación tributaria de la institución.',
  `estado` CHAR(1) NOT NULL DEFAULT '1' COMMENT 'Indica si el registro se encuentra activo o no. Activo = 1, Inactivo = 0',
  PRIMARY KEY (`inst_id`),
  CONSTRAINT `fk_institucion_ciudad1`
    FOREIGN KEY (`ciud_id`)
    REFERENCES `projectFinal`.`ciudad` (`ciud_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Aloja los datos de las instituciones académicas o educativas.';

CREATE INDEX `fk_institucion_ciudad1_idx` ON `projectFinal`.`institucion` (`ciud_id` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`departamento_administrativo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`departamento_administrativo` (
  `dead_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador único del registro.',
  `inst_id` INT UNSIGNED NOT NULL COMMENT 'Institución a la cual pertenece el departamento administrativo.',
  `nombre` VARCHAR(50) NOT NULL,
  `estado` CHAR(1) NOT NULL DEFAULT '1' COMMENT 'Indica si el registro se encuentra activo o no. Activo = 1, Inactivo = 0',
  PRIMARY KEY (`dead_id`),
  CONSTRAINT `fk_departamento_administrativo_institucion1`
    FOREIGN KEY (`inst_id`)
    REFERENCES `projectFinal`.`institucion` (`inst_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Aloja las unidades o dependencias de mayor nivel administrativo, estos departamentos se encargan de liderar las áreas organizativas. Ejemplos de departamentos administrativos son: TI, FINANZAS, EDUCACION, RECURSOS HUMANOS';

CREATE INDEX `fk_departamento_administrativo_institucion1_idx` ON `projectFinal`.`departamento_administrativo` (`inst_id` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`area_organizativa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`area_organizativa` (
  `aror_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `dead_id` INT UNSIGNED NOT NULL,
  `nombre` VARCHAR(100) NOT NULL,
  `estado` CHAR(1) NOT NULL DEFAULT '1' COMMENT 'Indica si el registro se encuentra activo o no. Activo = 1, Inactivo = 0',
  PRIMARY KEY (`aror_id`),
  CONSTRAINT `fk_area_organizativa_departamento_administrativo1`
    FOREIGN KEY (`dead_id`)
    REFERENCES `projectFinal`.`departamento_administrativo` (`dead_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Aloja las unidades de gestión de nivel intermedio.estas áreas organizativas son las presidencias que se encargan de liderar las gerencias. Algunos ejemplos son: GOBIERNO Y EXPERIENCIA DE TI, TECNOLOGIA Y TRANSFORMACION, INFRAESTRUCTURA TECNOLOGICA.';

CREATE INDEX `fk_area_organizativa_departamento_administrativo1_idx` ON `projectFinal`.`area_organizativa` (`dead_id` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`categoria_colaborador`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`categoria_colaborador` (
  `cacl_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(50) NOT NULL,
  `estado` CHAR(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`cacl_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `projectFinal`.`administrativo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`administrativo` (
  `admi_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `pers_id` INT UNSIGNED NOT NULL,
  `cacl_id` INT UNSIGNED NOT NULL,
  `codigo_acceso_general` VARCHAR(255) NOT NULL,
  `tiene_acceso_zona_restringida` CHAR(1) NOT NULL DEFAULT 0,
  `estado` CHAR(1) NOT NULL DEFAULT '1',
  `horas_semanales` INT NULL,
  PRIMARY KEY (`admi_id`),
  CONSTRAINT `fk_administrativo_persona1`
    FOREIGN KEY (`pers_id`)
    REFERENCES `projectFinal`.`persona` (`pers_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_administrativo_categoria_colaborador1`
    FOREIGN KEY (`cacl_id`)
    REFERENCES `projectFinal`.`categoria_colaborador` (`cacl_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_administrativo_persona1_idx` ON `projectFinal`.`administrativo` (`pers_id` ASC) ;

CREATE INDEX `fk_administrativo_categoria_colaborador1_idx` ON `projectFinal`.`administrativo` (`cacl_id` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`tipo_administrativo_unidad`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`tipo_administrativo_unidad` (
  `tiau_id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'Identificador único del registro.',
  `nombre` VARCHAR(50) NOT NULL COMMENT 'Nombre del oficio o encargo que tiene la persona con fuero administrativo.',
  `estado` CHAR(1) NOT NULL DEFAULT '1' COMMENT 'Indica si el registro se encuentra activo o no. Activo = 1, Inactivo = 0',
  PRIMARY KEY (`tiau_id`))
ENGINE = InnoDB
COMMENT = 'Aloja los nombres de los encargos u oficios que pueden tener los líderes de unidades administrativas en la organización, unos ejemplos son los siguientes: OFICIAL, PRESIDENTE, VICEPRESIDENTE, GERENTE, VICEGERENTE, DIRECTOR, RECTOR, VICERECTOR';


-- -----------------------------------------------------
-- Table `projectFinal`.`administrativo_institucion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`administrativo_institucion` (
  `adin` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `admi_id` INT UNSIGNED NOT NULL,
  `inst_id` INT UNSIGNED NOT NULL,
  `tiau_id` INT UNSIGNED NOT NULL,
  `estado` CHAR(1) NOT NULL DEFAULT '1' COMMENT 'Indica si el registro se encuentra activo o no. Activo = 1, Inactivo = 0',
  PRIMARY KEY (`adin`),
  CONSTRAINT `fk_administrativo_institucion_institucion1`
    FOREIGN KEY (`inst_id`)
    REFERENCES `projectFinal`.`institucion` (`inst_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_administrativo_institucion_administrativo1`
    FOREIGN KEY (`admi_id`)
    REFERENCES `projectFinal`.`administrativo` (`admi_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_administrativo_institucion_tipo_administrativo_unidad1`
    FOREIGN KEY (`tiau_id`)
    REFERENCES `projectFinal`.`tipo_administrativo_unidad` (`tiau_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_administrativo_institucion_institucion1_idx` ON `projectFinal`.`administrativo_institucion` (`inst_id` ASC) ;

CREATE INDEX `fk_administrativo_institucion_administrativo1_idx` ON `projectFinal`.`administrativo_institucion` (`admi_id` ASC) ;

CREATE INDEX `fk_administrativo_institucion_tipo_administrativo_unidad1_idx` ON `projectFinal`.`administrativo_institucion` (`tiau_id` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`administrativo_departamento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`administrativo_departamento` (
  `adde` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `admi_id` INT UNSIGNED NOT NULL,
  `dead_id` INT UNSIGNED NOT NULL,
  `tiau_id` INT UNSIGNED NOT NULL,
  `estado` CHAR(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`adde`, `tiau_id`),
  CONSTRAINT `fk_administrativo_departamento_departamento_administrativo1`
    FOREIGN KEY (`dead_id`)
    REFERENCES `projectFinal`.`departamento_administrativo` (`dead_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_administrativo_departamento_administrativo1`
    FOREIGN KEY (`admi_id`)
    REFERENCES `projectFinal`.`administrativo` (`admi_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_administrativo_departamento_tipo_administrativo_unidad1`
    FOREIGN KEY (`tiau_id`)
    REFERENCES `projectFinal`.`tipo_administrativo_unidad` (`tiau_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_administrativo_departamento_departamento_administrativo1_idx` ON `projectFinal`.`administrativo_departamento` (`dead_id` ASC) ;

CREATE INDEX `fk_administrativo_departamento_administrativo1_idx` ON `projectFinal`.`administrativo_departamento` (`admi_id` ASC) ;

CREATE INDEX `fk_administrativo_departamento_tipo_administrativo_unidad1_idx` ON `projectFinal`.`administrativo_departamento` (`tiau_id` ASC) ;


-- -----------------------------------------------------
-- Table `projectFinal`.`administrativo_area_organizativa`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `projectFinal`.`administrativo_area_organizativa` (
  `adao_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `admi_id` INT UNSIGNED NOT NULL,
  `aror_id` INT UNSIGNED NOT NULL,
  `tiau_id` INT UNSIGNED NOT NULL,
  `estado` CHAR(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`adao_id`, `admi_id`, `aror_id`, `tiau_id`),
  CONSTRAINT `fk_administrativo_area_organizativa_administrativo1`
    FOREIGN KEY (`admi_id`)
    REFERENCES `projectFinal`.`administrativo` (`admi_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_administrativo_area_organizativa_tipo_administrativo_unidad1`
    FOREIGN KEY (`tiau_id`)
    REFERENCES `projectFinal`.`tipo_administrativo_unidad` (`tiau_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_administrativo_area_organizativa_area_organizativa1`
    FOREIGN KEY (`aror_id`)
    REFERENCES `projectFinal`.`area_organizativa` (`aror_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_administrativo_area_organizativa_administrativo1_idx` ON `projectFinal`.`administrativo_area_organizativa` (`admi_id` ASC) ;

CREATE INDEX `fk_administrativo_area_organizativa_tipo_administrativo_uni_idx` ON `projectFinal`.`administrativo_area_organizativa` (`tiau_id` ASC) ;

CREATE INDEX `fk_administrativo_area_organizativa_area_organizativa1_idx` ON `projectFinal`.`administrativo_area_organizativa` (`aror_id` ASC) ;



CREATE TABLE IF NOT EXISTS `projectFinal`.`estudiantes` (
  `estu_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `pers_id` INT UNSIGNED NOT NULL,
  `codigo_estudiante` VARCHAR(50) NOT NULL UNIQUE,
  `fecha_ingreso` DATE NOT NULL,
  `estado` CHAR(1) NOT NULL DEFAULT '1',
  PRIMARY KEY (`estu_id`),
  CONSTRAINT `fk_estudiante_persona`
    FOREIGN KEY (`pers_id`)
    REFERENCES `projectFinal`.`persona` (`pers_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
) ENGINE = InnoDB;

CREATE INDEX `fk_estudiante_persona_idx` ON `projectFinal`.`estudiantes` (`pers_id`);
